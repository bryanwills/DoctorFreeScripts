#!/bin/bash
#
# any2any - convert from any video format to any other
#
# Written 7-Mar-2014 by Ronald Joe Record <rr@ronrecord.com>
#
#    This program works by either linking or copying any2any to a file
#    which specifies the desired input and output formats by its name.
#    For example, if you want to convert from WMV to MP4 then you could
#    create a symbolic link from any2any to wmv2mp4 as follows:
#        ln -s any2any wmv2mp4
#    Similarly, symbolic links (or copies or hard links) could be created
#    to convert from any (3 lowercase letter representation) video format
#    to any other video format. Commonly used conversions include:
#        wmv2mkv avi2mpg wmv2mp4 and so on.
#
#    Naming restricton: [3 lowercase letter input]2[3 lowercase letter output]
#    for a 7 letter name with "2" in the middle. The 3 letter prefix and suffix
#    must also be a filename suffix that ffmpeg recognizes as a video format.

ME=`basename $0`
PRE="${ME:0:3}"
SUF="${ME:4:3}"
INP=`echo $PRE | tr '[:lower:]' '[:upper:]'`
DIR=`echo $SUF | tr '[:lower:]' '[:upper:]'`
[ -d "$DIR" ] || {
    echo "Output directory does not exist or is not a directory. Creating."
    mkdir -p "$DIR"
}

CODEC=
SIZE=
OVER=
TELL=
USAGE=
ACODEC=
VCODEC=
PRESET=
RATE=
SAMPLE=
THREAD=
[ "$SUF" = "mp4" ] && {
    VCODEC="-vcodec libx264"
    RATE="-crf 23"
    SAMPLE="-ab 128k"
    THREAD="-threads 0"
}
[ "$SUF" = "wmv" ] && {
    ACODEC="-acodec adpcm_ms"
    VCODEC="-vcodec msmpeg4"
    RATE=
    SAMPLE="-ab 128k"
    THREAD="-threads 0"
}
[ "$SUF" = "avi" ] && {
    ACODEC="-acodec adpcm_ms"
    VCODEC="-vcodec libxvid"
    RATE=
    SAMPLE="-ab 128k"
    THREAD="-threads 0"
}
# TODO: Add desired default settings for other format encodings here

usage() {
    printf "\nUsage: $ME [-a audio codec] [-v video codec] [-c codec]"
    printf "\n\t\t[-p preset] [-r rate] [-b bitrate] [-t threads]"
    printf "\n\t\t[-s size] [-d] [-y] [-u] file1 [file2 file3 ...]\n"
    printf "\nWhere:\n\t-d indicates tell me what you would do"
    printf "\n\t-a audio codec specifies the output audio codec"
    printf "\n\t-v video codec specifies the output video codec"
    printf "\n\t-s size specifies the output video size (widthxheight)"
    printf "\n\t-c codec specifies the output codec"
    printf "\n\t-p preset specifies the ffmpeg preset to use"
    printf "\n\t-r rate specifies the rate for Constant Rate Factor (CRF)"
    printf "\n\t\tencoding. Use \"-r 0\" to disable for formats other than x264"
    printf "\n\t-b bitrate specifies the bitrate (default 128k)"
    printf "\n\t-t threads specifies the number of threads to use"
    printf "\n\t-y indicates overwrite output files without asking"
    printf "\n\t-u displays this usage message\n"
    printf "\nCurrent invocation defaults to:\n\nffmpeg -i INPUT -loglevel warning -strict -2 $OPTS OUTPUT\n"
    printf "\nExamples:\n\tCopy audio and video codecs, convert the container"
    printf "\n\t$ME -c copy $INP/example.$SUF"
    printf "\n\tSpecify output video size of 640 width by 480 height"
    printf "\n\t$ME -s 640x480 $INP/example.$SUF"
    printf "\n\tSpecify libx264 output video codec and use ipod640 preset"
    printf "\n\t$ME -v libx264 -p ipod640 $INP/example.$SUF\n"
    exit 1
}

while getopts p:r:b:t:s:v:a:c:ydu flag; do
    case $flag in
        a)
            ACODEC="-acodec $OPTARG"
            ;;
        b)
            SAMPLE="-ab $OPTARG"
            ;;
        c)
            CODEC="-codec $OPTARG"
            ;;
        d)
            TELL=1
            ;;
        p)
            PRESET="-vpre $OPTARG"
            ;;
        r)
            if [ $OPTARG -eq 0 ]
            then
                RATE=
            else
                RATE="-crf $OPTARG"
            fi
            ;;
        s)
            SIZE="-s $OPTARG"
            ;;
        t)
            THREAD="-threads $OPTARG"
            ;;
        y)
            OVER="-y"
            ;;
        v)
            VCODEC="-vcodec $OPTARG"
            ;;
        u)
            USAGE=1
            ;;
    esac
done
shift $(( OPTIND - 1 ))

# Set any options specified on the command line - the sed part is just
# removing any leading or trailing spaces.
OPTS=`echo "$OVER $ACODEC $CODEC $SIZE $VCODEC $PRESET $RATE $SAMPLE $THREAD" | sed -e 's/^ *//' -e 's/ *$//'`

# Display usage message and exit if -u was given on the command line.
# We delay until now in order to gather up all the other command line options.
[ "$USAGE" ] && usage

for i in "$@"
do
    [ -f "$i" ] || {
        echo "Input file $i does not exist or is not a regular file. Skipping."
        continue
    }
    # Set the output directory and filename
    j=`echo "$i" | sed -e "s/${INP}\//${DIR}\//" -e "s/\.${PRE}/\.${SUF}/"`
    echo "ffmpeg -i $i -loglevel warning -strict -2 $OPTS $j"
    [ "$TELL" ] || ffmpeg -i "$i" -loglevel warning -strict -2 $OPTS "$j"
done
