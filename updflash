#!/bin/bash
#
# updflash - update my flash drive that stores backups of my movies, pictures,
#            documents, source, etc.
#
# Written 28-Mar-2014 by Ronald Joe Record <rr@ronrecord.com>
#
# Note: This script is dependent on my "upd" and "chk" scripts
#
# Copyright (c) 2014, Ronald Joe Record
# All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# The Software is provided "as is", without warranty of any kind, express or
# implied, including but not limited to the warranties of merchantability,
# fitness for a particular purpose and noninfringement. In no event shall the
# authors or copyright holders be liable for any claim, damages or other
# liability, whether in an action of contract, tort or otherwise, arising from,
# out of or in connection with the Software or the use or other dealings in
# the Software.
#
# Modify the following default locations to suit your needs.
# This script invokes the upd script. You may also wish to customize
# the default locations in the upd script.
#
########### DEFAULT LOCATIONS ######################
# The mount point for the flash drive
TRAN_DIR=/Volumes/Transcend
# A directory that we know exists there
TEST_DIR="$TRAN_DIR"/Pictures
# My iTunes library
LACIE="/Volumes/Lacie_Porsche_1TB"
ITUNES="$LACIE/iTunes"
# My Aperture libraries
APLIBS="/Volumes/My_Book_Studio/Pictures/Libraries"
APLIBS_DEST="$TRAN_DIR/Pictures/Aperture"
# The mount point for the My Book Studio drive that holds my pics and movies
MBS="/Volumes/My_Book_Studio"
# The name of my "work" directory
WORK=Work
# Where I store my photos
PIC_DIR="$MBS/Pictures"
PIC_WORK_DIR="$PIC_DIR/$WORK"
# Where I store my movies
MOV_DIR="$MBS/Movies"
MOV_WORK_DIR="$MOV_DIR/$WORK"
# Directories in my Home directory that I want to backup
HOME_DIRS="Documents Movies Music Pictures bin src"
########### END DEFAULT LOCATIONS ######################

usage() {
    printf "Usage: $0 [-n] [-a] [-c] [-i] [-p] [-m] [-h] [-u]\n"
    printf "Where:\n\t-n indicates to tell me what you would do\n"
    printf "\t-u indicates display this usage message and exit\n"
    printf "\t-a indicates rsync the Aperture libraries\n"
    printf "\t-c indicates check if rsync is needed before sync'ing\n"
    printf "\t-i indicates rsync the iTunes library\n"
    printf "\t-p indicates rsync the Pictures directory\n"
    printf "\t-m indicates rsync the Movies directory\n"
    printf "\t-h indicates rsync the Home directory\n\n"
    printf "When invoked with no arguments all directories will be sync'd.\n\n"
    exit 1
}

# Default to non-dry run
DRY=
# Default to no check
CHK=
# If no arguments or the only argument is -n then rsync all dirs
DO_ALL=
if [ $# -eq 0 ]
then
    DO_ALL=1
else
    if [ $# -eq 1 ]
    then
        if [ "$1" = "-n" ]
        then
            DO_ALL=1
        fi
    fi
fi
if [ "$DO_ALL" ]
then
    DO_APERT=1
    DO_ITUNES=1
    DO_PIC=1
    DO_MOV=1
    DO_HOME=1
else
    DO_APERT=
    DO_ITUNES=
    DO_PIC=
    DO_MOV=
    DO_HOME=
fi
while getopts acipmhnu flag; do
    case $flag in
        a)
            DO_APERT=1
            ;;
        c)
            CHK=1
            ;;
        i)
            DO_ITUNES=1
            ;;
        p)
            DO_PIC=1
            ;;
        m)
            DO_MOV=1
            ;;
        h)
            DO_HOME=1
            ;;
        n)
            DRY="-n"
            ;;
        u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

# Check if the flash drive is mounted in its proper location
[ -d "$TEST_DIR" ] || {
    # Sometimes we gotta wake it up
    ls "$TEST_DIR" > /dev/null 2>&1
    sleep 2
    [ -d "$TEST_DIR" ] || {
        echo "$TRAN_DIR does not seem to be mounted. Exiting."
        exit 1
    }
}

[ "$DO_APERT" ] && {
    # Update the backup of my Aperture libraries
    if [ -d "$APLIBS" ]
    then
        if [ "$CHK" ]
        then
            chk $DRY -r -a "$APLIBS" -s ".aplibrary" -t "$APLIBS_DEST"
        else
            # Equivalent of "upd -A"
            upd $DRY -a "$APLIBS" -s ".aplibrary" -t "$APLIBS_DEST"
        fi
    else
        echo "$ITUNES does not exist or is not a directory. Skipping."
    fi
}

[ "$DO_ITUNES" ] && {
    # Update the backup of my iTunes library
    if [ -d "$ITUNES" ]
    then
        if [ "$CHK" ]
        then
            chk $DRY -r -a "$LACIE" -t "$TRAN_DIR" iTunes
        else
            # Equivalent of "upd -I"
            upd $DRY -a "$LACIE" -t "$TRAN_DIR" iTunes
        fi
    else
        echo "$ITUNES does not exist or is not a directory. Skipping."
    fi
 }

[ "$DO_PIC" ] && {
    # Sync the work photos
    if [ -d "$PIC_WORK_DIR" ]
    then
        if [ "$CHK" ]
        then
            chk $DRY -r -P "$WORK"
        else
            upd $DRY -P "$WORK"
        fi
    else
        echo "$PIC_WORK_DIR does not exist or is not a directory. Skipping."
    fi
 }

[ "$DO_MOV" ] && {
    # Sync the work movies
    if [ -d "$MOV_WORK_DIR" ]
    then
        if [ "$CHK" ]
        then
            chk $DRY -r -M "$WORK"
        else
            upd $DRY -M "$WORK"
        fi
    else
        echo "$MOV_WORK_DIR does not exist or is not a directory. Skipping."
    fi
}

[ "$DO_HOME" ] && {
    # Sync some of the directories in my home directory
    for dir in $HOME_DIRS
    do
        if [ -d "$HOME/$dir" ]
        then
            if [ "$CHK" ]
            then
                chk $DRY -r -H "$dir"
            else
                upd $DRY -H "$dir"
            fi
        else
            echo "$HOME/$dir does not exist or is not a directory. Skipping."
        fi
    done
}
