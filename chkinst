#!/bin/bash
#
# chkinst - Check if installed versions of files in current directory are
#    different in order to determine if git repository is up-to-date.
#
# Written 8-Mar-2014 by Ronald Joe Record
#
# Note: this script assumes the files in your git repository are named the
#       same as their installed counterparts
# Copyright (c) 2014, Ronald Joe Record
# All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# The Software is provided "as is", without warranty of any kind, express or
# implied, including but not limited to the warranties of merchantability,
# fitness for a particular purpose and noninfringement. In no event shall the
# authors or copyright holders be liable for any claim, damages or other
# liability, whether in an action of contract, tort or otherwise, arising from,
# out of or in connection with the Software or the use or other dealings in
# the Software.
#

usage() {
    printf "\nUsage: chkinst [-u] [-a] [-d] [-f] [-i] [-n]"
    printf "\nWhere:"
    printf "\n\t-u displays this usage message"
    printf "\n\t-a indicates report on all files, not just those installed"
    printf "\n\t-d indicates display output of a diff between files"
    printf "\n\t-f indicates force update of installed file(s)"
    printf "\n\t-i indicates prompt for update of installed file(s)"
    printf "\n\t-n indicates tell me what you would copy without doing it\n"
    exit 1
}

update() {
    printf "\nCopying $1 to $2\n"
    [ "$TELL" ] || cp "$1" "$2"
}

differ() {
    echo "$1 differs from installed version $2"
    echo ""
    [ "$DIFF" ] && {
        diff "$1" "$2"
        echo ""
    }
    [ "$UPD" ] && {
        REFORCE=
        FOUND=
        for cmd in $DIFFER
        do
            [ "$1" = "$cmd" ] && {
                FOUND=1
                break
            }
        done
        [ "$FOUND" ] && {
            echo "Looks like you need to update one of your customized files."
            echo "$1 is on your list of files to prompt before installing."
            [ "$FORCE" ] && {
                FORCE=
                REFORCE=1
            }
        }
        if [ "$FORCE" ]
        then
            update "$1" "$2"
        else
            while true
            do
                read -p "Do you want to install the new version ? (y/n) " yn
                case $yn in
                    [Yy]* ) update "$1" "$2"; break;;
                    [Nn]* ) break;;
                        * ) echo "Please answer yes or no.";;
                esac
            done
            [ "$REFORCE" ] && FORCE=1
        fi
    }
}

check() {
    dnum=`diff "$1" "$2" | wc -l`
    [ $dnum -ne $3 ] && differ "$1" "$2"
}

ALL=
DIFF=
TELL=
UPD=
FORCE=
# List of installed files which differ from those in my git repo due to
# tailoring for my own use. These will not get force installed without first
# prompting you if you really want to.
DIFFER="bash_aliases bash_profile bashrc mkreadme mkwmv wb"
while getopts adfinu flag; do
    case $flag in
        a)
            ALL=1
            ;;
        d)
            DIFF=1
            ;;
        i)
            UPD=1
            ;;
        f)
            UPD=1
            FORCE=1
            ;;
        n)
            TELL=1
            ;;
        u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

for i in *
do
    # Skip directories
    [ -d "$i" ] && continue
    # Scripts can be either commands or startup configuration files in $HOME 
    case "$i" in
        bash_aliases|bash_profile|bashrc|dircolors|vimrc)
            if [ -f "$HOME/.$i" ]
            then
                inst="$HOME/.$i"
            else
                inst=
            fi
            ;;
        *)
            inst=`type -p "$i"`
            ;;
    esac
    [ "$inst" ] || {
        [ "$ALL" ] && {
            echo "$i does not appear to be installed. Skipping."
            echo ""
        }
        continue
    }
    # Special cases as the installed version may have configuration changes.
    # The 3rd argument to the check() function is the number of lines the
    # installed script can differ before we report it differs. This number
    # will differ from system to system so change it for your purposes. To
    # determine what the number should be, run the command:
    #     diff $i $inst | wc -l
    # where $i is the source file and $inst is the installed version.
    # This functionality is mostly for me, the maintainer and distributor.
    #
    case "$i" in
        # I have heavily modified Bash startup files for work.
        bash_aliases)
            check "$i" "$inst" 92
            ;;
        bash_profile)
            check "$i" "$inst" 11
            ;;
        bashrc)
            check "$i" "$inst" 37
            ;;
        wb)
            check "$i" "$inst" 8
            ;;
        mkreadme|mkwmv)
            check "$i" "$inst" 12
            ;;
        *)
            cmp -s "$i" "$inst" || differ "$i" "$inst"
            ;;
    esac
done
