#!/bin/bash
#
# updgit - perform the git add, git commit, and git push to the remote
#          repository associated with this clone.
#
# Written 8-Mar-2014 by Ronald Joe Record <rr@ronrecord.com>
#

usage() {
    printf "\nUsage: updgit [-u] [-a] [-d] [-m \"message comment\"] [file1 ...]"
    printf "\nWhere:"
    printf "\n\t-u displays this usage message."
    printf "\n\t-a indicates to commit all staged files."
    printf "\n\t-d indicates to demonstrate what you would do without doing it."
    printf "\n\t-m comment adds the comment string as the commit message."
    printf "\n\t   \"comment message\" must be enclosed in quotes."
    printf "\n\tfile1 file2 ... lists files to be staged and commited."
    printf "\n\tNote, you must either specify -a or a list of file(s).\n\n"
    exit 1
}

COMMENT=
TELL=
ALL=
ADD=
while getopts am:du flag; do
    case $flag in
        a)
            ALL=1
            ADD="-a"
            ;;
        d)
            TELL=1
            ;;
        m)
            COMMENT="$OPTARG"
            ;;
        u)
            usage
            ;;
    esac
done
shift $(( OPTIND - 1 ))

echo ""
# Check filename arguments to verify they exist
if [ "$ALL" ]
then
    [ $# -eq 0 ] || {
        echo "Filename arguments with -a doesn't make sense."
        echo "Exiting."
        usage
    }
else
    [ $# -eq 0 ] && {
        echo "No filename arguments. Did you mean to use the -a argument ?"
        echo "Exiting."
        usage
    }
fi
for i in "$@"
do
    [ -f "$i" ] || {
        echo "At least one of your filename arguments: $i"
        echo "does not exist or is not a plain file. Exiting."
        usage
    }
done

[ "$ALL" ] || {
    echo "git add $@"
    [ "$TELL" ] || git add $@
}
if [ "$COMMENT" ]
then
    echo "git commit $ADD -m \"$COMMENT\""
else
    echo "git commit $ADD"
fi
[ "$TELL" ] || {
    if [ "$COMMENT" ]
    then
        git commit $ADD -m "$COMMENT"
    else
        git commit $ADD
    fi
}
echo "git push origin master"
[ "$TELL" ] || git push origin master
