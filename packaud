#!/bin/bash
#
# packaud - archive and compress my Audacity project files
#
# Written 30-Jan-2015 by Ronald Joe Record <rr at ronrecord dot com>
#
# Copyright (c) 2015, Ronald Joe Record
# All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# The Software is provided "as is", without warranty of any kind, express or
# implied, including but not limited to the warranties of merchantability,
# fitness for a particular purpose and noninfringement. In no event shall the
# authors or copyright holders be liable for any claim, damages or other
# liability, whether in an action of contract, tort or otherwise, arising from,
# out of or in connection with the Software or the use or other dealings in
# the Software.
#

# Set this to your Audacity project directory or specify with the -a option
AUD_DIR="/Volumes/My_Book_Studio/Audio/Audacity"
TELL=
USAGE=

usage() {
    printf "\nUsage: packaud [-a audacity dir] [-d] [-u]\n"
    printf "\nWhere:\n\taudacity dir is your Audacity project directory\n"
    printf "\t-d indicates a dry run (tell me what you would do)\n"
    printf "\t-u displays this usage message\n"
    printf "\nAudacity directory = ${AUD_DIR}\n\n"
    exit 1
}

Archive() {
    Arch_Dir="$1"
    if [ -d "$Arch_Dir" ]
    then
        Nospace=`echo $Arch_Dir | sed -e "s/ /_/g"`
        if [ "$TELL" ]
        then
            echo "tar cf - $Arch_Dir | gzip -9 > ${Nospace}-Audacity.tar.gz" 
            echo "rm -rf $Arch_Dir"
        else
            printf "\tCreating compressed tar archive of $Arch_Dir ... "
            tar cf - "$Arch_Dir" | gzip -9 > "${Nospace}-Audacity.tar.gz"
            rm -rf "$Arch_Dir"
            printf "done.\n"
        fi
    else
        echo "No directory $Arch_Dir - no archive created."
    fi
}

while getopts a:du flag; do
    case $flag in
        a)
            AUD_DIR="$OPTARG"
            ;;
        d)
            TELL=1
            ;;
        u)
            USAGE=1
            ;;
    esac
done
shift $(( OPTIND - 1 ))

[ "$USAGE" ] && usage

[ -d "$AUD_DIR" ] || {
    echo "$AUD_DIR does not exist or is not a directory. Exiting."
    usage
}

cd "$AUD_DIR"
for Artist in *
do
    [ -d "$Artist" ] || {
        echo "$Artist does not exist or is not a directory. Skipping."
        continue
    }

    printf "\nArchiving and compressing titles by ${Artist}\n"
    cd "$Artist"

    for Album in *
    do
        [ -r "$Album" ] || continue
        Last="${Album: -15}"
        [ "$Last" = "Audacity.tar.gz" ] && continue
        Last="${Album: -4}"
        [ "$Last" = ".aup" ] && {
            Aname="${Album:0:${#Album}-4}"
            [ -d "${Aname}_data" ] || {
              [ -f "${Aname}.aup" ] && {
                echo "Found aup file $Album but no data dir. Skipping."
                continue
              }
            }
            if [ -d "$Aname" ]
            then
                echo "$Aname already exists. Skipping."
                continue
            else
                mkdir "$Aname"
            fi
            if [ "$TELL" ]
            then
                echo "mv $Album $Aname"
                echo "mv ${Aname}_data $Aname"
            else
                mv "$Album" "$Aname"
                mv "${Aname}_data" "$Aname"
            fi
            Archive "$Aname"
            continue
        }
        Last="${Album: -5}"
        [ "$Last" = "_data" ] && {
            Aname="${Album:0:${#Album}-5}"
            [ -f "${Aname}.aup" ] || {
              [ -d "${Aname}_data" ] && {
                echo "Found data dir $Album but no project file. Skipping."
                continue
              }
            }
            if [ -d "$Aname" ]
            then
                echo "$Aname already exists. Skipping."
                continue
            else
                mkdir "$Aname"
            fi
            if [ "$TELL" ]
            then
                echo "mv $Album $Aname"
                echo "mv ${Aname}.aup $Aname"
            else
                mv "$Album" "$Aname"
                mv "${Aname}.aup" "$Aname"
            fi
            Archive "$Aname"
            continue
        }
        if [ -d "$Album" ]
        then
            Archive "$Album"
        else
            echo "$Album does not exist or is not a directory. Skipping."
        fi
    done
    cd ..
    printf "Done archiving and compressing titles by $Artist\n"
done
