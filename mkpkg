#!/bin/bash
PKG="doctorfree-scripts"
PKG_NAME="DoctorFreeScripts"
TOP="usr"
LOCAL="${TOP}/local"
DESTDIR="${LOCAL}/${PKG_NAME}"
SRC_NAME="DoctorFreeScripts"
SRC=${HOME}/src/${SRC_NAME}
SUDO=sudo
GCI=

[ -f "${SRC}/VERSION" ] || {
  [ -f "/builds/doctorfree/${SRC_NAME}/VERSION" ] || {
    echo "$SRC/VERSION does not exist. Exiting."
    exit 1
  }
  SRC="/builds/doctorfree/${SRC_NAME}"
  SUDO=
  GCI=1
}

. "${SRC}/VERSION"
PKG_VER=${VERSION}
PKG_REL=${RELEASE}

# Subdirectory in which to create the distribution files
OUT_DIR="dist/${PKG_NAME}_${PKG_VER}"

SUBDIRS="Config IFTTT binance chrome-themes \
         clone coinmarketcap doc profittrailer systemd"
DOT_FILES="bash_aliases bash_profile bashrc dircolors drfree kv vimrc wallutils"
IMG_FILES="Scripts-Logo.png Vertical.png"

cd "${SRC}"
${SUDO} rm -rf dist
mkdir dist

[ -d ${OUT_DIR} ] && rm -rf ${OUT_DIR}
mkdir ${OUT_DIR}
cp -a pkg/debian ${OUT_DIR}/DEBIAN
chmod 755 ${OUT_DIR} ${OUT_DIR}/DEBIAN ${OUT_DIR}/DEBIAN/*

echo "Package: ${PKG}
Version: ${PKG_VER}
Section: misc
Priority: optional
Architecture: all
Depends: qterminal (>= 0.14.1)
Maintainer: ${DEBFULLNAME} <${DEBEMAIL}>
Build-Depends: debhelper (>= 11)
Standards-Version: 4.1.3
Homepage: https://gitlab.com/doctorfree/DoctorFreeScripts
Description: General Purpose Command Line Tools
 Manage your system from the command line" > ${OUT_DIR}/DEBIAN/control

chmod 644 ${OUT_DIR}/DEBIAN/control

for dir in "${TOP}" "${LOCAL}" "${DESTDIR}" \
           "${LOCAL}/share" "${LOCAL}/share/applications" \
            "${LOCAL}/share/doc" "${LOCAL}/share/doc/${PKG}"
do
    [ -d ${OUT_DIR}/${dir} ] || ${SUDO} mkdir ${OUT_DIR}/${dir}
    ${SUDO} chown root:root ${OUT_DIR}/${dir}
done

${SUDO} cp -a Utils/bin ${OUT_DIR}/${DESTDIR}/bin

for script in ImageMagick/*
do
    grep ${script} .gitignore > /dev/null || {
        b=`basename ${script}`
        ${SUDO} cp ${script} ${OUT_DIR}/${DESTDIR}/bin/${b}
    }
done

for script in Wallpapers/*.sh
do
    grep ${script} .gitignore > /dev/null || {
        b=`basename ${script}`
        dest=`echo ${b} | sed -e "s/\.sh//"`
        ${SUDO} cp ${script} ${OUT_DIR}/${DESTDIR}/bin/${dest}
    }
done

for script in scripts/*.sh
do
    grep ${script} .gitignore > /dev/null || {
        dest=`echo ${script} | sed -e "s/scripts\///" -e "s/\.sh//"`
        ${SUDO} cp ${script} ${OUT_DIR}/${DESTDIR}/bin/${dest}
    }
done

${SUDO} cp Config/autostart/*.desktop "${OUT_DIR}/${LOCAL}/share/applications"
${SUDO} cp AUTHORS ${OUT_DIR}/${LOCAL}/share/doc/${PKG}/AUTHORS
${SUDO} cp LICENSE ${OUT_DIR}/${LOCAL}/share/doc/${PKG}/copyright
${SUDO} cp CHANGELOG.md ${OUT_DIR}/${LOCAL}/share/doc/${PKG}/changelog
${SUDO} cp README.md ${OUT_DIR}/${LOCAL}/share/doc/${PKG}/README
${SUDO} gzip -9 ${OUT_DIR}/${LOCAL}/share/doc/${PKG}/changelog
${SUDO} cp -a markdown "${OUT_DIR}/${LOCAL}/share/doc/${PKG}/markdown"
${SUDO} cp -a man "${OUT_DIR}/${LOCAL}/share/doc/${PKG}/man"
${SUDO} cp -a man "${OUT_DIR}/${LOCAL}/share/man"

for dir in ${SUBDIRS}
do
    ${SUDO} cp -a ${dir} ${OUT_DIR}/${DESTDIR}/${dir}
done

[ -d ${OUT_DIR}/${LOCAL}/share ] || ${SUDO} mkdir -p ${OUT_DIR}/${LOCAL}/share
[ -d ${OUT_DIR}/${LOCAL}/share/bash ] || ${SUDO} mkdir -p ${OUT_DIR}/${LOCAL}/share/bash
${SUDO} cp ${DOT_FILES} ${OUT_DIR}/${LOCAL}/share/bash
[ -d ${OUT_DIR}/${LOCAL}/share/images ] || ${SUDO} mkdir -p ${OUT_DIR}/${LOCAL}/share/images
${SUDO} cp ${IMG_FILES} ${OUT_DIR}/${LOCAL}/share/images
[ -d ${OUT_DIR}/${DESTDIR}/etc ] || ${SUDO} mkdir -p ${OUT_DIR}/${DESTDIR}/etc
${SUDO} cp etc/* ${OUT_DIR}/${DESTDIR}/etc

[ -f .gitignore ] && {
    while read ignore
    do
        ${SUDO} rm -f ${OUT_DIR}/${DESTDIR}/${ignore}
    done < .gitignore
}

${SUDO} chmod 755 ${OUT_DIR}/${DESTDIR}/bin/*

cd dist
${SUDO} dpkg --build ${PKG_NAME}_${PKG_VER} ${PKG_NAME}_${PKG_VER}-${PKG_REL}.deb
cd ${PKG_NAME}_${PKG_VER}
echo "Creating compressed tar archive of ${PKG_NAME} ${PKG_VER} distribution"
tar cf - usr | gzip -9 > ../${PKG_NAME}_${PKG_VER}-${PKG_REL}.tar.gz

have_zip=`type -p zip`
[ "${have_zip}" ] || {
  ${SUDO} apt-get update
  ${SUDO} apt-get install zip -y
}
echo "Creating zip archive of ${PKG_NAME} ${PKG_VER} distribution"
zip -q -r ../${PKG_NAME}_${PKG_VER}-${PKG_REL}.zip usr

[ "${GCI}" ] || {
    cd ..
    [ -d ../releases ] || mkdir ../releases
    [ -d ../releases/${PKG_VER} ] || mkdir ../releases/${PKG_VER}
    ${SUDO} cp *.deb *.gz *.zip ../releases/${PKG_VER}
}

# RPM distribution build
cd "${SRC}"
[ -d pkg/rpm ] && cp -a pkg/rpm ${OUT_DIR}/rpm
[ -d ${OUT_DIR}/rpm ] || mkdir ${OUT_DIR}/rpm

have_rpm=`type -p rpmbuild`
[ "${have_rpm}" ] || {
  ${SUDO} apt-get update
  export DEBIAN_FRONTEND=noninteractive
  ${SUDO} ln -fs /usr/share/zoneinfo/America/Los_Angeles /etc/localtime
  ${SUDO} apt-get install rpm -y
  ${SUDO} dpkg-reconfigure --frontend noninteractive tzdata
}

rpmbuild -ba --build-in-place \
   --define "_topdir ${OUT_DIR}" \
   --define "_sourcedir ${OUT_DIR}" \
   --define "_version ${PKG_VER}" \
   --define "_release ${PKG_REL}" \
   --buildroot ${SRC}/${OUT_DIR}/BUILDROOT \
   ${OUT_DIR}/rpm/${PKG_NAME}.spec

${SUDO} cp dist/${PKG_NAME}_${PKG_VER}/RPMS/*/*.rpm dist

[ "${GCI}" ] || {
    [ -d releases ] || mkdir releases
    [ -d releases/${PKG_VER} ] || mkdir releases/${PKG_VER}
    ${SUDO} cp ${OUT_DIR}/RPMS/*/*.rpm releases/${PKG_VER}
}
